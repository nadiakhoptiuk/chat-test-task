{"version":3,"file":"static/js/authorization.e2a66957.chunk.js","mappings":"iKACA,EAA0B,yB,UCGX,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,MACAC,EAIC,EAJDA,SACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,WACAC,EACC,EADDA,SAEA,OACE,qBACEC,UAAWC,EACXC,MAAO,CAAEL,MAAM,GAAD,OAAKA,GAASC,WAAW,GAAD,OAAKA,IAF7C,WAIE,eAAIE,UAAWJ,EAAW,uBAAyB,eAAnD,SACGD,IAEFI,O,4ECjBQ,SAASI,EAAcC,GACpC,OAA0BC,EAAAA,EAAAA,UAASD,GAAnC,eAAOE,EAAP,KAAcC,EAAd,KAMA,MAAO,CAAED,MAAAA,EAAOC,SAAAA,EAAUC,aAJL,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MAChCF,EAASE,O,uMCLb,EAAuB,wBAAvB,EAAuD,yBAAvD,EAA8F,+BAA9F,EAA6I,iCAA7I,EAA2L,8BAA3L,EAA2O,mC,UCc5N,SAASE,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAIIV,EAAAA,EAAAA,GAAc,IAHTW,EADT,EACER,MACUS,EAFZ,EAEER,SACcS,EAHhB,EAGER,aAEF,GAIIL,EAAAA,EAAAA,GAAc,IAHTc,EADT,EACEX,MACUY,EAFZ,EAEEX,SACcY,EAHhB,EAGEX,aAEIY,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAapBC,EAAY,WAChBR,EAAa,IACbG,EAAgB,KAGlB,OACE,SAACxB,EAAA,EAAD,CACEC,MAAM,oCACNC,UAAU,EACVC,MAAM,OACNC,WAAY,EAJd,UAME,UAAC0B,EAAA,EAAD,CAAWtB,MAAO,CAAEuB,QAAS,SAA7B,WACE,kBAAMzB,UAAWC,EAAQyB,SAxBL,SAAAC,GACxBA,EAAIC,iBAEJhB,GAASiB,EAAAA,EAAAA,IAAM,CAAEC,MAAOhB,EAAWiB,SAAUd,KAC7CM,KAoBI,WACE,SAACS,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,SACNC,QAAQ,WACRC,KAAK,QACLC,WAAW,EACXrC,UAAWC,EACXQ,MAAOK,EACPwB,SAAUtB,KAEZ,SAACgB,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,YACNC,QAAQ,WACRC,KAAK,WACLG,UAAQ,EACRvC,UAAWC,EACXQ,MAAOQ,EACPqB,SAAUnB,KAEZ,SAACqB,EAAA,EAAD,CACEL,QAAQ,YACRC,KAAK,SACLK,UAAW3B,GAAaG,EAAayB,OAAS,EAC9C1C,UAAWC,EACX0C,SAAS,SAACC,EAAA,EAAD,IALX,wBAWF,cAAG5C,UAAWC,EAAd,kCACA,mBAAQ4C,QAlDW,WACvBjC,GAASkC,EAAAA,EAAAA,GAAgB,CAAEhB,MAAOhB,EAAWiB,SAAUd,MAiDhBjB,UAAWC,EAA9C,UACE,gBAAKD,UAAWC,EAAhB,UACE,gBAAK8C,KAAI,UAAKC,EAAAA,EAAL,sBAGZ5B,IACC,SAAC6B,EAAA,EAAD,CACEC,GAAI,CACFrD,MAAO,QACPsD,OAAQ,YACRC,UAAW,EACXC,gBAAiB,QAEnBC,QAAS,EAPX,UASE,SAACC,EAAA,EAAD,CACEC,SAAS,QACTrB,QAAQ,WACRsB,QAASC,YAAW,WAClB9C,GAAS+C,EAAAA,EAAAA,QACR,KACHC,QACE,SAACpB,EAAA,EAAD,CACEqB,MAAM,UACNC,KAAK,QACLjB,QAAS,WACPjC,GAAS+C,EAAAA,EAAAA,OAJb,mBAPJ,SAkBGvC","sources":["webpack://chat-test-task/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","hooks/useFormFields.js","webpack://chat-test-task/./src/views/LogInView/LogInView.module.css?d6ee","views/LogInView/LogInView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__xN0ZL\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({\n  title,\n  isHidden,\n  width,\n  flexShrink,\n  children,\n}) {\n  return (\n    <section\n      className={s.section}\n      style={{ width: `${width}`, flexShrink: `${flexShrink}` }}\n    >\n      <h1 className={isHidden ? 'sectionTitleIsHidden' : 'sectionTitle'}>\n        {title}\n      </h1>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  isHidden: PropTypes.bool.isRequired,\n  width: PropTypes.string.isRequired,\n  flexShrink: PropTypes.number.isRequired,\n};\n","import { useState } from 'react';\n\nexport default function useFormFields(initialVal) {\n  const [state, setState] = useState(initialVal);\n\n  const handleChange = ({ target: { value } }) => {\n    setState(value);\n  };\n\n  return { state, setState, handleChange };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LogInView_form__NyUMI\",\"input\":\"LogInView_input__O3NdO\",\"registerBtn\":\"LogInView_registerBtn__uy0k2\",\"googleAuthBtn\":\"LogInView_googleAuthBtn__o9PSn\",\"googleIcon\":\"LogInView_googleIcon__eSeuK\",\"googleAuthLabel\":\"LogInView_googleAuthLabel__zdBZJ\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport Alert from '@mui/material/Alert';\nimport SendIcon from '@mui/icons-material/Send';\nimport Stack from '@mui/material/Stack';\nimport useFormFields from 'hooks/useFormFields';\nimport { logIn, logInWithGoogle } from 'redux/auth/authOperations';\nimport { resetError } from 'redux/auth/authActions';\nimport { getError } from 'redux/auth/authSelectors';\nimport Container from 'components/Container';\nimport Section from 'components/Section';\nimport sprite from '../../images/sprite.svg';\nimport s from './LogInView.module.css';\n\nexport default function LogInView() {\n  const dispatch = useDispatch();\n  const {\n    state: userEmail,\n    setState: setUserEmail,\n    handleChange: handleUserEmailChange,\n  } = useFormFields('');\n  const {\n    state: userPassword,\n    setState: setUserPassword,\n    handleChange: handleUserPasswordChange,\n  } = useFormFields('');\n  const error = useSelector(getError);\n\n  const handleLogInSubmit = evt => {\n    evt.preventDefault();\n\n    dispatch(logIn({ email: userEmail, password: userPassword }));\n    formReset();\n  };\n\n  const handleGoogleAuth = () => {\n    dispatch(logInWithGoogle({ email: userEmail, password: userPassword }));\n  };\n\n  const formReset = () => {\n    setUserEmail('');\n    setUserPassword('');\n  };\n\n  return (\n    <Section\n      title=\"Please sign in to access the site\"\n      isHidden={false}\n      width=\"100%\"\n      flexShrink={0}\n    >\n      <Container style={{ display: 'block' }}>\n        <form className={s.form} onSubmit={handleLogInSubmit}>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Email:\"\n            variant=\"outlined\"\n            type=\"email\"\n            autoFocus={true}\n            className={s.input}\n            value={userEmail}\n            onChange={handleUserEmailChange}\n          />\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Password:\"\n            variant=\"outlined\"\n            type=\"password\"\n            required\n            className={s.input}\n            value={userPassword}\n            onChange={handleUserPasswordChange}\n          />\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            disabled={!userEmail || userPassword.length < 7 ? true : false}\n            className={s.registerBtn}\n            endIcon={<SendIcon />}\n          >\n            Log In\n          </Button>\n        </form>\n\n        <p className={s.googleAuthLabel}>Log in with Google:</p>\n        <button onClick={handleGoogleAuth} className={s.googleAuthBtn}>\n          <svg className={s.googleIcon}>\n            <use href={`${sprite}#icon-google`}></use>\n          </svg>\n        </button>\n        {error && (\n          <Stack\n            sx={{\n              width: '500px',\n              margin: '10px auto',\n              boxShadow: 8,\n              backgroundColor: '#fff',\n            }}\n            spacing={2}\n          >\n            <Alert\n              severity=\"error\"\n              variant=\"outlined\"\n              onClose={setTimeout(() => {\n                dispatch(resetError());\n              }, 2000)}\n              action={\n                <Button\n                  color=\"inherit\"\n                  size=\"small\"\n                  onClick={() => {\n                    dispatch(resetError());\n                  }}\n                >\n                  Close\n                </Button>\n              }\n            >\n              {error}\n            </Alert>\n          </Stack>\n        )}\n      </Container>\n    </Section>\n  );\n}\n"],"names":["Section","title","isHidden","width","flexShrink","children","className","s","style","useFormFields","initialVal","useState","state","setState","handleChange","value","target","LogInView","dispatch","useDispatch","userEmail","setUserEmail","handleUserEmailChange","userPassword","setUserPassword","handleUserPasswordChange","error","useSelector","getError","formReset","Container","display","onSubmit","evt","preventDefault","logIn","email","password","TextField","id","label","variant","type","autoFocus","onChange","required","Button","disabled","length","endIcon","Send","onClick","logInWithGoogle","href","sprite","Stack","sx","margin","boxShadow","backgroundColor","spacing","Alert","severity","onClose","setTimeout","resetError","action","color","size"],"sourceRoot":""}