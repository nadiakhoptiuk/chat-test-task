{"version":3,"file":"static/js/chat.acff2c49.chunk.js","mappings":"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","sources":["webpack://chat-test-task/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","hooks/useFormFields.js","webpack://chat-test-task/./src/components/ContactItem/ContactItem.module.css?be2b","webpack://chat-test-task/./src/components/ContactInfoBox/ContactInfoBox.module.css?9fcd","components/ContactInfoBox/ContactInfoBox.js","redux/chat/chatSelectors.js","components/ContactItem/ContactItem.js","redux/filter/filterSelector.js","webpack://chat-test-task/./src/components/ContactsList/ContactsList.module.css?d8e9","webpack://chat-test-task/./src/components/FilterInput/FilterInput.module.css?5089","components/FilterInput/FilterInput.js","components/ContactsList/ContactsList.js","webpack://chat-test-task/./src/components/FormSendMessage/FormSendMessage.module.css?aa22","components/FormSendMessage/FormSendMessage.js","service/chuckNorrisApi.js","webpack://chat-test-task/./src/components/MessagesHistory/MessageHistory.module.css?e26b","components/MessagesHistory/MessagesHistory.js","components/Chat/Chat.js","views/ChatView/ChatView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({\n  title,\n  isHidden,\n  width,\n  flexShrink,\n  children,\n}) {\n  return (\n    <section\n      className={s.section}\n      style={{ width: `${width}`, flexShrink: `${flexShrink}` }}\n    >\n      <h1 className={isHidden ? 'sectionTitleIsHidden' : 'sectionTitle'}>\n        {title}\n      </h1>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  isHidden: PropTypes.bool.isRequired,\n  width: PropTypes.string.isRequired,\n  flexShrink: PropTypes.number.isRequired,\n};\n","import { useState } from 'react';\n\nexport default function useFormFields(initialVal) {\n  const [state, setState] = useState(initialVal);\n\n  const handleChange = ({ target: { value } }) => {\n    setState(value);\n  };\n\n  return { state, setState, handleChange };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Z4FuP\",\"contactBtn\":\"ContactItem_contactBtn__nMiN-\",\"selectedBtn\":\"ContactItem_selectedBtn__DiKOt ContactItem_contactBtn__nMiN-\",\"noneSelectedBtn\":\"ContactItem_noneSelectedBtn__oOELV ContactItem_contactBtn__nMiN-\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactInfoWrapper\":\"ContactInfoBox_contactInfoWrapper__av+tf\",\"avatarWrapper\":\"ContactInfoBox_avatarWrapper__Z98dj\",\"avatar\":\"ContactInfoBox_avatar__5O8YW\",\"contactName\":\"ContactInfoBox_contactName__+svwH\",\"statusIndicatorOnline\":\"ContactInfoBox_statusIndicatorOnline__n0KjE\",\"statusIndicatorOffline\":\"ContactInfoBox_statusIndicatorOffline__EYWbA\"};","import { useGetContactByIdQuery } from 'redux/contacts';\nimport s from './ContactInfoBox.module.css';\n\nexport function ContactInfoBox({ id }) {\n  const { data } = useGetContactByIdQuery(id);\n\n  return data ? (\n    <>\n      <div className={s.contactInfoWrapper}>\n        <div className={s.avatarWrapper}>\n          <img\n            src={data?.avatar}\n            alt={`${data?.username} avatar`}\n            className={s.avatar}\n          />\n          <div\n            className={\n              data?.isOnline\n                ? s.statusIndicatorOnline\n                : s.statusIndicatorOffline\n            }\n          ></div>\n        </div>\n\n        <p className={s.contactName}>{data?.username}</p>\n      </div>\n    </>\n  ) : null;\n}\n","export const selectedContactIdSelector = state => state.selectedContactId;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport s from './ContactItem.module.css';\nimport { ContactInfoBox } from 'components/ContactInfoBox/ContactInfoBox';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectedContactIdSelector } from 'redux/chat/chatSelectors';\nimport { setSelectedContactId } from 'redux/chat/chatActions';\n\nexport default function ContactItem({ id }) {\n  const selectedContactId = useSelector(selectedContactIdSelector);\n  const dispatch = useDispatch();\n\n  function checkIsContactSelected() {\n    return JSON.stringify(id) === JSON.stringify(selectedContactId);\n  }\n\n  const isContactSelected = checkIsContactSelected();\n\n  return (\n    <li className={s.contactItem}>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(setSelectedContactId(id))}\n        className={isContactSelected ? s.selectedBtn : s.noneSelectedBtn}\n      >\n        <ContactInfoBox id={id} />\n      </button>\n\n      {/* {isLoading &\n        (\n          <LoadingButton loading variant=\"outlined\" className={s.btnDelete}>\n            Submit\n          </LoadingButton>\n        )} */}\n    </li>\n  );\n}\n\n// ContactItem.propTypes = {\n//   contactData: PropTypes.shape({\n//     username: PropTypes.string.isRequired,\n//     avatar: PropTypes.string.isRequired,\n//     isOnline: PropTypes.bool.isRequired,\n//     messages: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         message: PropTypes.string.isRequired,\n//         date: PropTypes.string.isRequired,\n//         isSendedByMe: PropTypes.bool.isRequired,\n//       })\n//     ),\n//     id: PropTypes.string.isRequired,\n//   }),\n// };\n","export const filterSelector = state => state.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__ZQI1L\"};","// extracted by mini-css-extract-plugin\nexport default {\"inputLabel\":\"FilterInput_inputLabel__C+sAF\",\"filterInput\":\"FilterInput_filterInput__LNZay\",\"notification\":\"FilterInput_notification__67Cr3\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filter/filterActions';\nimport { filterSelector } from 'redux/filter/filterSelector';\nimport s from './FilterInput.module.css';\nimport { useGetContactsQuery } from 'redux/contacts';\n\nexport default function FilterInput() {\n  const { data } = useGetContactsQuery('', {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n\n  const onInputFind = evt => {\n    const stringForFilter = evt.target.value;\n    dispatch(updateFilter(stringForFilter));\n  };\n\n  return (\n    <>\n      {data?.length > 0 ? (\n        <label className={s.inputLabel}>\n          <input\n            className={s.filterInput}\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={onInputFind}\n            placeholder=\"Search or start new chat\"\n          />\n        </label>\n      ) : null}\n    </>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport ContactItem from 'components/ContactItem';\nimport { filterSelector } from 'redux/filter/filterSelector';\nimport s from './ContactsList.module.css';\nimport FilterInput from 'components/FilterInput';\nimport Section from 'components/Section';\nimport { useGetContactsQuery } from 'redux/contacts';\n\nexport default function ContactsList() {\n  const { data } = useGetContactsQuery();\n  const filter = useSelector(filterSelector);\n\n  const filterContacts = () => {\n    const normalizedString = filter?.toLowerCase();\n\n    return filter\n      ? data?.filter(contact =>\n          contact.username.toLowerCase().includes(normalizedString)\n        )\n      : data;\n  };\n\n  const filteredContacts = filterContacts();\n\n  return (\n    <Section\n      title=\"Chats\"\n      isHidden={false}\n      width={window.innerWidth < 768 ? '200px' : '300px'}\n      flexShrink={0}\n    >\n      <FilterInput />\n      <ul className={s.contactsList}>\n        {filteredContacts\n          ? filteredContacts?.map(filteredContact => (\n              <ContactItem key={filteredContact.id} id={filteredContact.id} />\n            ))\n          : null}\n      </ul>\n    </Section>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"FormSendMessage_formWrapper__pP-FY\",\"form\":\"FormSendMessage_form__qHlW2\",\"input\":\"FormSendMessage_input__hlTCO\",\"formBtn\":\"FormSendMessage_formBtn__R-YUO\",\"btnIcon\":\"FormSendMessage_btnIcon__qVR2i\"};","import { GrSend } from 'react-icons/gr';\nimport useFormFields from 'hooks/useFormFields';\nimport s from './FormSendMessage.module.css';\nimport { useCallback, useEffect } from 'react';\nimport getChuckResponce from 'service/chuckNorrisApi';\nimport { useAddMessageToContactMutation } from 'redux/contacts';\n\nexport default function FormSendMessage({\n  id,\n  setMessageList,\n  data,\n  messageList,\n}) {\n  const {\n    state: message,\n    setState: setMessage,\n    handleChange: handleMessageChange,\n  } = useFormFields('');\n  const [addMessageToContact] = useAddMessageToContactMutation();\n\n  const generateNewMessageList = useCallback(\n    async (message, bool) => {\n      const newMessage = {\n        message: message,\n        date: new Date().toISOString(),\n        isSendedByMe: bool,\n      };\n\n      const newList = [...data?.messages, newMessage].sort(\n        (a, b) => new Date(a.date) - new Date(b.date)\n      );\n      await setMessageList(newList);\n\n      await addMessageToContact({\n        id: id,\n        contact: { ...data, messages: newList },\n      });\n    },\n    [addMessageToContact, data, id, setMessageList]\n  );\n\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n    generateNewMessageList(message, true);\n    setMessage('');\n  };\n\n  useEffect(() => {\n    if (!messageList) {\n      return;\n    }\n\n    const dateNow = new Date().getTime();\n    const lastMessage = messageList[messageList?.length - 1];\n    const lastMessageDate = new Date(lastMessage?.date).getTime();\n\n    if (!lastMessage?.isSendedByMe || dateNow - lastMessageDate > 10000) {\n      return;\n    } else {\n      const timeOut = setTimeout(() => {\n        getChuckResponce()\n          .then(message => {\n            generateNewMessageList(message, false);\n          })\n          .catch(error => {\n            console.log(error);\n          });\n      }, 10000);\n\n      return () => {\n        clearTimeout(timeOut);\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messageList]);\n\n  return (\n    <div className={s.formWrapper}>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"message\"\n          className={s.input}\n          placeholder=\"Type your message...\"\n          value={message}\n          onChange={handleMessageChange}\n        />\n        <button type=\"submit\" className={s.formBtn}>\n          <GrSend className={s.btnIcon} />\n        </button>\n      </form>\n    </div>\n  );\n}\n","import axios from 'axios';\nconst BASE_URL = 'https://api.chucknorris.io/jokes/random';\n\nexport default function getChuckResponce() {\n  return axios({\n    method: 'get',\n    url: BASE_URL,\n  }).then(response => response.data.value);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"messageList\":\"MessageHistory_messageList__a9+dD\",\"message\":\"MessageHistory_message__5aRvm\",\"myMessage\":\"MessageHistory_myMessage__HM7bD MessageHistory_message__5aRvm\",\"interlocutorMessage\":\"MessageHistory_interlocutorMessage__7+L5R MessageHistory_message__5aRvm\",\"messageText\":\"MessageHistory_messageText__TJe4M\",\"myMessageText\":\"MessageHistory_myMessageText__RnlJ9 MessageHistory_messageText__TJe4M\",\"interlocutorMessageText\":\"MessageHistory_interlocutorMessageText__7j-Pq MessageHistory_messageText__TJe4M\",\"messageDate\":\"MessageHistory_messageDate__lZ3A9\"};","import FormSendMessage from 'components/FormSendMessage';\nimport { format } from 'date-fns';\nimport { useEffect, useState } from 'react';\nimport { useGetContactByIdQuery } from 'redux/contacts';\nimport s from './MessageHistory.module.css';\n\nexport default function MessagesHistory({ id, messageListRef }) {\n  const [messageList, setMessageList] = useState(messageListRef?.current);\n  const { data } = useGetContactByIdQuery(id, {\n    refetchOnReconnect: true,\n    refetchOnMountOrArgChange: true,\n  });\n\n  useEffect(() => {\n    if (document?.getElementById('chat') === null) {\n      return;\n    } else {\n      function scrollToBottom(element) {\n        element.scroll({ top: element.scrollHeight, behavior: 'smooth' });\n      }\n      scrollToBottom(document.getElementById('chat'));\n    }\n  }, [id, messageList]);\n\n  useEffect(() => {\n    if (data && data?.length !== 0) {\n      setMessageList(data?.messages);\n    }\n  }, [data, setMessageList]);\n\n  return (\n    <>\n      <ul className={s.messageList} id=\"chat\">\n        {messageList\n          ? messageList?.map(({ message, isSendedByMe, date }, index) => {\n              const newDate = format(new Date(date), 'PP, p');\n\n              return (\n                <li\n                  key={index}\n                  className={isSendedByMe ? s.myMessage : s.interlocutorMessage}\n                >\n                  <p\n                    className={\n                      isSendedByMe ? s.myMessageText : s.interlocutorMessageText\n                    }\n                  >\n                    {message}\n                  </p>\n                  <span className={s.messageDate}>{newDate}</span>\n                </li>\n              );\n            })\n          : null}\n      </ul>\n      <FormSendMessage\n        id={id}\n        setMessageList={setMessageList}\n        data={data}\n        messageList={messageList}\n      />\n    </>\n  );\n}\n","import { ContactInfoBox } from 'components/ContactInfoBox/ContactInfoBox';\nimport MessagesHistory from 'components/MessagesHistory';\nimport Section from 'components/Section';\nimport { useEffect, useRef } from 'react';\nimport { useGetContactByIdQuery } from 'redux/contacts';\n\nexport default function Chat({ id }) {\n  const { data } = useGetContactByIdQuery(id);\n\n  useEffect(() => {\n    if (!data || data?.messages?.length === 0) {\n      return;\n    } else {\n      const sortArrayByDate = array => {\n        return [...array].sort((a, b) => new Date(a.date) - new Date(b.date));\n      };\n\n      const sortedArray = sortArrayByDate(data?.messages);\n      messageListRef.current = sortedArray;\n    }\n  }, [data]);\n\n  const messageListRef = useRef(null);\n\n  return (\n    <Section title=\"Chat\" isHidden={true} width=\"100%\" flexShrink={1}>\n      <ContactInfoBox id={id} />\n      <MessagesHistory id={id} messageListRef={messageListRef.current} />\n    </Section>\n  );\n}\n","import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n// import { Watch } from 'react-loader-spinner';\n// import Section from 'components/Section';\nimport Container from 'components/Container';\nimport ContactsList from 'components/ContactsList';\nimport { useEffect } from 'react';\nimport Chat from 'components/Chat';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSelectedContactId } from 'redux/chat/chatActions';\nimport { useGetContactsQuery } from 'redux/contacts';\n\nexport default function ChatView() {\n  const dispatch = useDispatch();\n  const selectedContactId = useSelector(state => state.selectedContactId);\n  const { data, isFetching } = useGetContactsQuery('', {\n    refetchOnReconnect: true,\n    refetchOnMountOrArgChange: true,\n  });\n\n  useEffect(() => {\n    if (!data) return;\n    if (!isFetching && selectedContactId === null) {\n      dispatch(setSelectedContactId(data[0].id));\n    }\n  }, [data, dispatch, isFetching, selectedContactId]);\n\n  console.log(window.innerWidth);\n\n  return (\n    <>\n      <Container>\n        <ContactsList />\n        <Chat id={selectedContactId} />\n      </Container>\n    </>\n  );\n}\n"],"names":["Section","title","isHidden","width","flexShrink","children","className","s","style","useFormFields","initialVal","useState","state","setState","handleChange","value","target","ContactInfoBox","id","data","useGetContactByIdQuery","src","avatar","alt","username","isOnline","selectedContactIdSelector","selectedContactId","ContactItem","useSelector","dispatch","useDispatch","isContactSelected","JSON","stringify","type","onClick","setSelectedContactId","filterSelector","filter","FilterInput","useGetContactsQuery","refetchOnFocus","refetchOnReconnect","length","name","onChange","evt","stringForFilter","updateFilter","placeholder","ContactsList","filteredContacts","normalizedString","toLowerCase","contact","includes","filterContacts","window","innerWidth","map","filteredContact","FormSendMessage","setMessageList","messageList","message","setMessage","handleMessageChange","useAddMessageToContactMutation","addMessageToContact","generateNewMessageList","useCallback","bool","newMessage","date","Date","toISOString","isSendedByMe","newList","messages","sort","a","b","handleSubmit","preventDefault","useEffect","dateNow","getTime","lastMessage","lastMessageDate","timeOut","setTimeout","axios","method","url","then","response","catch","error","console","log","clearTimeout","onSubmit","MessagesHistory","messageListRef","current","refetchOnMountOrArgChange","document","getElementById","element","scroll","top","scrollHeight","behavior","index","newDate","format","Chat","array","sortedArray","useRef","ChatView","isFetching","Container"],"sourceRoot":""}