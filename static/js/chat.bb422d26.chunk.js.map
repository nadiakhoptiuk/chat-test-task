{"version":3,"file":"static/js/chat.bb422d26.chunk.js","mappings":"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","sources":["webpack://chat-test-task/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","hooks/useFormFields.js","redux/filter/filterSelector.js","redux/chat/chatSelectors.js","webpack://chat-test-task/./src/components/ContactInfoBox/ContactInfoBox.module.css?9fcd","components/ContactInfoBox/ContactInfoBox.js","webpack://chat-test-task/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.js","webpack://chat-test-task/./src/components/FilterInput/FilterInput.module.css?5089","components/FilterInput/FilterInput.js","webpack://chat-test-task/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.js","webpack://chat-test-task/./src/components/FormSendMessage/FormSendMessage.module.css?aa22","components/FormSendMessage/FormSendMessage.js","service/chuckNorrisApi.js","webpack://chat-test-task/./src/components/MessagesHistory/MessageHistory.module.css?e26b","components/MessagesHistory/MessagesHistory.js","components/Chat/Chat.js","views/ChatView/ChatView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__xN0ZL\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({\n  title,\n  isHidden,\n  width,\n  flexShrink,\n  children,\n}) {\n  return (\n    <section\n      className={s.section}\n      style={{ width: `${width}`, flexShrink: `${flexShrink}` }}\n    >\n      <h1 className={isHidden ? 'sectionTitleIsHidden' : 'sectionTitle'}>\n        {title}\n      </h1>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  isHidden: PropTypes.bool.isRequired,\n  width: PropTypes.string.isRequired,\n  flexShrink: PropTypes.number.isRequired,\n};\n","import { useState } from 'react';\n\nexport default function useFormFields(initialVal) {\n  const [state, setState] = useState(initialVal);\n\n  const handleChange = ({ target: { value } }) => {\n    setState(value);\n  };\n\n  return { state, setState, handleChange };\n}\n","export const filterSelector = state => state.filter;\n","export const selectedContactIdSelector = state => state.selectedContactId;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contactInfoWrapper\":\"ContactInfoBox_contactInfoWrapper__NH-iq\",\"avatarWrapper\":\"ContactInfoBox_avatarWrapper__9-POm\",\"avatar\":\"ContactInfoBox_avatar__Kn7+k\",\"contactName\":\"ContactInfoBox_contactName__AmXMp\",\"statusIndicatorOnline\":\"ContactInfoBox_statusIndicatorOnline__yztA2\",\"statusIndicatorOffline\":\"ContactInfoBox_statusIndicatorOffline__npz3T\"};","import PropTypes from 'prop-types';\r\nimport { useGetContactByIdQuery } from 'redux/contacts';\r\nimport s from './ContactInfoBox.module.css';\r\n\r\nexport function ContactInfoBox({ id }) {\r\n  const { data } = useGetContactByIdQuery(id);\r\n\r\n  return data ? (\r\n    <>\r\n      <div className={s.contactInfoWrapper}>\r\n        <div className={s.avatarWrapper}>\r\n          <img\r\n            src={data?.avatar}\r\n            alt={`${data?.username} avatar`}\r\n            className={s.avatar}\r\n          />\r\n          <div\r\n            className={\r\n              data?.isOnline\r\n                ? s.statusIndicatorOnline\r\n                : s.statusIndicatorOffline\r\n            }\r\n          ></div>\r\n        </div>\r\n\r\n        <p className={s.contactName}>{data?.username}</p>\r\n      </div>\r\n    </>\r\n  ) : null;\r\n}\r\n\r\nContactInfoBox.propTypes = {\r\n  id: PropTypes.string,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__sINKJ\",\"contactBtn\":\"ContactItem_contactBtn__a8ND5\",\"selectedBtn\":\"ContactItem_selectedBtn__0PKLm ContactItem_contactBtn__a8ND5\",\"noneSelectedBtn\":\"ContactItem_noneSelectedBtn__UGS-A ContactItem_contactBtn__a8ND5\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setSelectedContactId } from 'redux/chat/chatActions';\nimport { selectedContactIdSelector } from 'redux/chat/chatSelectors';\nimport { ContactInfoBox } from 'components/ContactInfoBox/ContactInfoBox';\nimport s from './ContactItem.module.css';\n\nexport default function ContactItem({ id }) {\n  const selectedContactId = useSelector(selectedContactIdSelector);\n  const dispatch = useDispatch();\n\n  function checkIsContactSelected() {\n    return JSON.stringify(id) === JSON.stringify(selectedContactId);\n  }\n\n  const isContactSelected = checkIsContactSelected();\n\n  return (\n    <li className={s.contactItem}>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(setSelectedContactId(id))}\n        className={isContactSelected ? s.selectedBtn : s.noneSelectedBtn}\n      >\n        <ContactInfoBox id={id} />\n      </button>\n    </li>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"inputLabel\":\"FilterInput_inputLabel__y5XAK\",\"filterInput\":\"FilterInput_filterInput__Lxj26\",\"notification\":\"FilterInput_notification__3RDdF\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filter/filterActions';\nimport { useGetContactsQuery } from 'redux/contacts';\nimport { filterSelector } from 'redux/filter/filterSelector';\nimport s from './FilterInput.module.css';\n\nexport default function FilterInput() {\n  const { data } = useGetContactsQuery('', {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n\n  const onInputFind = evt => {\n    const stringForFilter = evt.target.value;\n    dispatch(updateFilter(stringForFilter));\n  };\n\n  return (\n    <>\n      {data?.length > 0 ? (\n        <label className={s.inputLabel}>\n          <input\n            className={s.filterInput}\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={onInputFind}\n            placeholder=\"Search or start new chat\"\n          />\n        </label>\n      ) : null}\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__dmDPP\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from 'redux/contacts';\nimport { filterSelector } from 'redux/filter/filterSelector';\nimport ContactItem from 'components/ContactItem';\nimport FilterInput from 'components/FilterInput';\nimport Section from 'components/Section';\nimport s from './ContactsList.module.css';\n\nexport default function ContactsList() {\n  const { data } = useGetContactsQuery();\n  const filter = useSelector(filterSelector);\n\n  const filterContacts = () => {\n    const normalizedString = filter?.toLowerCase();\n\n    return filter\n      ? data?.filter(contact =>\n          contact.username.toLowerCase().includes(normalizedString)\n        )\n      : data;\n  };\n\n  const filteredContacts = filterContacts();\n\n  return (\n    <Section\n      title=\"Chats\"\n      isHidden={false}\n      width={window.innerWidth < 768 ? '150px' : '300px'}\n      flexShrink={0}\n    >\n      <FilterInput />\n      <ul className={s.contactsList}>\n        {filteredContacts\n          ? filteredContacts?.map(filteredContact => (\n              <ContactItem key={filteredContact.id} id={filteredContact.id} />\n            ))\n          : null}\n      </ul>\n    </Section>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"FormSendMessage_formWrapper__3QvBa\",\"form\":\"FormSendMessage_form__BOKyp\",\"input\":\"FormSendMessage_input__oVFIf\",\"formBtn\":\"FormSendMessage_formBtn__XxEp6\",\"btnIcon\":\"FormSendMessage_btnIcon__8mo59\"};","import { useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport getChuckResponce from 'service/chuckNorrisApi';\r\nimport { GrSend } from 'react-icons/gr';\r\nimport { useAddMessageToContactMutation } from 'redux/contacts';\r\nimport useFormFields from 'hooks/useFormFields';\r\nimport s from './FormSendMessage.module.css';\r\n\r\nexport default function FormSendMessage({\r\n  id,\r\n  setMessageList,\r\n  data,\r\n  messageList,\r\n}) {\r\n  const {\r\n    state: message,\r\n    setState: setMessage,\r\n    handleChange: handleMessageChange,\r\n  } = useFormFields('');\r\n  const [addMessageToContact] = useAddMessageToContactMutation();\r\n\r\n  const generateNewMessageList = useCallback(\r\n    async (message, bool) => {\r\n      const newMessage = {\r\n        message: message,\r\n        date: new Date().toISOString(),\r\n        isSendedByMe: bool,\r\n      };\r\n\r\n      const newList = [...data?.messages, newMessage].sort(\r\n        (a, b) => new Date(a.date) - new Date(b.date)\r\n      );\r\n      await setMessageList(newList);\r\n\r\n      await addMessageToContact({\r\n        id: id,\r\n        contact: { ...data, messages: newList },\r\n      });\r\n    },\r\n    [addMessageToContact, data, id, setMessageList]\r\n  );\r\n\r\n  const handleSubmit = async evt => {\r\n    evt.preventDefault();\r\n    generateNewMessageList(message, true);\r\n    setMessage('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!messageList) {\r\n      return;\r\n    }\r\n\r\n    const dateNow = new Date().getTime();\r\n    const lastMessage = messageList[messageList?.length - 1];\r\n    const lastMessageDate = new Date(lastMessage?.date).getTime();\r\n\r\n    if (!lastMessage?.isSendedByMe || dateNow - lastMessageDate > 10000) {\r\n      return;\r\n    } else {\r\n      const timeOut = setTimeout(() => {\r\n        getChuckResponce()\r\n          .then(message => {\r\n            generateNewMessageList(message, false);\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          });\r\n      }, 10000);\r\n\r\n      return () => {\r\n        clearTimeout(timeOut);\r\n      };\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [messageList]);\r\n\r\n  return (\r\n    <div className={s.formWrapper}>\r\n      <form className={s.form} onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"message\"\r\n          className={s.input}\r\n          placeholder=\"Type your message...\"\r\n          value={message}\r\n          onChange={handleMessageChange}\r\n        />\r\n        <button type=\"submit\" className={s.formBtn}>\r\n          <GrSend className={s.btnIcon} />\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nFormSendMessage.propTypes = {\r\n  id: PropTypes.string,\r\n  setMessageList: PropTypes.func,\r\n  data: PropTypes.shape({\r\n    username: PropTypes.string.isRequired,\r\n    avatar: PropTypes.string,\r\n    isOnline: PropTypes.bool.isRequired,\r\n    messages: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        message: PropTypes.string.isRequired,\r\n        date: PropTypes.string.isRequired,\r\n        isSendedByMe: PropTypes.bool.isRequired,\r\n      }).isRequired\r\n    ),\r\n  }),\r\n};\r\n","import axios from 'axios';\r\nconst BASE_URL = 'https://api.chucknorris.io/jokes/random';\r\n\r\nexport default function getChuckResponce() {\r\n  return axios({\r\n    method: 'get',\r\n    url: BASE_URL,\r\n  }).then(response => response.data.value);\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageList\":\"MessageHistory_messageList__kB8TA\",\"message\":\"MessageHistory_message__X7hS2\",\"myMessage\":\"MessageHistory_myMessage__LHpj9 MessageHistory_message__X7hS2\",\"interlocutorMessage\":\"MessageHistory_interlocutorMessage__ZhKK+ MessageHistory_message__X7hS2\",\"messageText\":\"MessageHistory_messageText__UXzfN\",\"myMessageText\":\"MessageHistory_myMessageText__+3Tgi MessageHistory_messageText__UXzfN\",\"interlocutorMessageText\":\"MessageHistory_interlocutorMessageText__5bDl0 MessageHistory_messageText__UXzfN\",\"messageDate\":\"MessageHistory_messageDate__MflNb\"};","import { useEffect, useState } from 'react';\r\nimport { format } from 'date-fns';\r\nimport PropTypes from 'prop-types';\r\nimport { useGetContactByIdQuery } from 'redux/contacts';\r\nimport FormSendMessage from 'components/FormSendMessage';\r\nimport s from './MessageHistory.module.css';\r\n\r\nexport default function MessagesHistory({ id, messageListRef }) {\r\n  const [messageList, setMessageList] = useState(messageListRef?.current);\r\n  const { data } = useGetContactByIdQuery(id, {\r\n    refetchOnReconnect: true,\r\n    refetchOnMountOrArgChange: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (document?.getElementById('chat') === null) {\r\n      return;\r\n    } else {\r\n      function scrollToBottom(element) {\r\n        element.scroll({ top: element.scrollHeight, behavior: 'smooth' });\r\n      }\r\n      scrollToBottom(document.getElementById('chat'));\r\n    }\r\n  }, [id, messageList]);\r\n\r\n  useEffect(() => {\r\n    if (data && data?.length !== 0) {\r\n      setMessageList(data?.messages);\r\n    }\r\n  }, [data, setMessageList]);\r\n\r\n  return (\r\n    <>\r\n      <ul className={s.messageList} id=\"chat\">\r\n        {messageList\r\n          ? messageList?.map(({ message, isSendedByMe, date }, index) => {\r\n              const newDate = format(new Date(date), 'PP, p');\r\n\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={isSendedByMe ? s.myMessage : s.interlocutorMessage}\r\n                >\r\n                  <p\r\n                    className={\r\n                      isSendedByMe ? s.myMessageText : s.interlocutorMessageText\r\n                    }\r\n                  >\r\n                    {message}\r\n                  </p>\r\n                  <span className={s.messageDate}>{newDate}</span>\r\n                </li>\r\n              );\r\n            })\r\n          : null}\r\n      </ul>\r\n      <FormSendMessage\r\n        id={id}\r\n        setMessageList={setMessageList}\r\n        data={data}\r\n        messageList={messageList}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nMessagesHistory.propTypes = {\r\n  id: PropTypes.string,\r\n  messageListRef: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      message: PropTypes.string.isRequired,\r\n      date: PropTypes.string.isRequired,\r\n      isSendedByMe: PropTypes.bool.isRequired,\r\n    })\r\n  ),\r\n};\r\n","import { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useGetContactByIdQuery } from 'redux/contacts';\r\nimport { ContactInfoBox } from 'components/ContactInfoBox/ContactInfoBox';\r\nimport MessagesHistory from 'components/MessagesHistory';\r\nimport Section from 'components/Section';\r\n\r\nexport default function Chat({ id }) {\r\n  const { data } = useGetContactByIdQuery(id);\r\n\r\n  useEffect(() => {\r\n    if (!data || data?.messages?.length === 0) {\r\n      return;\r\n    } else {\r\n      const sortArrayByDate = array => {\r\n        return [...array].sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      };\r\n\r\n      const sortedArray = sortArrayByDate(data?.messages);\r\n      messageListRef.current = sortedArray;\r\n    }\r\n  }, [data]);\r\n\r\n  const messageListRef = useRef(null);\r\n\r\n  return (\r\n    <Section title=\"Chat\" isHidden={true} width=\"100%\" flexShrink={1}>\r\n      <ContactInfoBox id={id} />\r\n      <MessagesHistory id={id} messageListRef={messageListRef.current} />\r\n    </Section>\r\n  );\r\n}\r\n\r\nChat.propTypes = {\r\n  id: PropTypes.string,\r\n};\r\n","import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setSelectedContactId } from 'redux/chat/chatActions';\r\nimport { useGetContactsQuery } from 'redux/contacts';\r\nimport Container from 'components/Container';\r\nimport ContactsList from 'components/ContactsList';\r\nimport Chat from 'components/Chat';\r\n\r\nexport default function ChatView() {\r\n  const dispatch = useDispatch();\r\n  const selectedContactId = useSelector(state => state.selectedContactId);\r\n  const { data, isFetching } = useGetContactsQuery('', {\r\n    refetchOnReconnect: true,\r\n    refetchOnMountOrArgChange: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n    if (!isFetching && selectedContactId === null) {\r\n      dispatch(setSelectedContactId(data[0].id));\r\n    }\r\n  }, [data, dispatch, isFetching, selectedContactId]);\r\n\r\n  return (\r\n    <>\r\n      <Container style={{ display: 'flex' }}>\r\n        <ContactsList />\r\n        <Chat id={selectedContactId} />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Section","title","isHidden","width","flexShrink","children","className","s","style","useFormFields","initialVal","useState","state","setState","handleChange","value","target","filterSelector","filter","selectedContactIdSelector","selectedContactId","ContactInfoBox","id","data","useGetContactByIdQuery","src","avatar","alt","username","isOnline","ContactItem","useSelector","dispatch","useDispatch","isContactSelected","JSON","stringify","type","onClick","setSelectedContactId","FilterInput","useGetContactsQuery","refetchOnFocus","refetchOnReconnect","length","name","onChange","evt","stringForFilter","updateFilter","placeholder","ContactsList","filteredContacts","normalizedString","toLowerCase","contact","includes","filterContacts","window","innerWidth","map","filteredContact","FormSendMessage","setMessageList","messageList","message","setMessage","handleMessageChange","useAddMessageToContactMutation","addMessageToContact","generateNewMessageList","useCallback","bool","newMessage","date","Date","toISOString","isSendedByMe","newList","messages","sort","a","b","handleSubmit","preventDefault","useEffect","dateNow","getTime","lastMessage","lastMessageDate","timeOut","setTimeout","axios","method","url","then","response","catch","error","console","log","clearTimeout","onSubmit","MessagesHistory","messageListRef","current","refetchOnMountOrArgChange","document","getElementById","element","scroll","top","scrollHeight","behavior","index","newDate","format","Chat","array","sortedArray","useRef","ChatView","isFetching","Container","display"],"sourceRoot":""}