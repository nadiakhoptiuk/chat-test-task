{"version":3,"file":"static/js/registration.1c8a5f17.chunk.js","mappings":"iKACA,EAA0B,yB,UCGX,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,MACAC,EAIC,EAJDA,SACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,WACAC,EACC,EADDA,SAEA,OACE,qBACEC,UAAWC,EACXC,MAAO,CAAEL,MAAM,GAAD,OAAKA,GAASC,WAAW,GAAD,OAAKA,IAF7C,WAIE,eAAIE,UAAWJ,EAAW,uBAAyB,eAAnD,SACGD,IAEFI,O,4ECjBQ,SAASI,EAAcC,GACpC,OAA0BC,EAAAA,EAAAA,UAASD,GAAnC,eAAOE,EAAP,KAAcC,EAAd,KAMA,MAAO,CAAED,MAAAA,EAAOC,SAAAA,EAAUC,aAJL,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MAChCF,EAASE,O,6LCLb,EAAuB,2BAAvB,EAA0D,4BAA1D,EAAoG,kC,UCarF,SAASE,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAIIV,EAAAA,EAAAA,GAAc,IAHTW,EADT,EACER,MACUS,EAFZ,EAEER,SACcS,EAHhB,EAGER,aAEF,GAIIL,EAAAA,EAAAA,GAAc,IAHTc,EADT,EACEX,MACUY,EAFZ,EAEEX,SACcY,EAHhB,EAGEX,aAEIY,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAQpBC,EAAY,WAChBR,EAAa,IACbG,EAAgB,KAGlB,OACE,SAACxB,EAAA,EAAD,CACEC,MAAM,kBACNC,UAAU,EACVC,MAAM,OACNC,WAAY,EAJd,UAME,UAAC0B,EAAA,EAAD,CAAWtB,MAAO,CAAEuB,QAAS,SAA7B,WACE,kBAAMzB,UAAWC,EAAQyB,SAnBF,SAAAC,GAC3BA,EAAIC,iBACJhB,GAASiB,EAAAA,EAAAA,IAAS,CAAEC,MAAOhB,EAAWiB,SAAUd,KAChDM,KAgBI,WACE,SAACS,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,SACNC,QAAQ,WACRC,KAAK,QACLpC,UAAWC,EACXQ,MAAOK,EACPuB,SAAUrB,KAEZ,SAACgB,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,YACNC,QAAQ,WACRC,KAAK,WACLE,UAAQ,EACRtC,UAAWC,EACXQ,MAAOQ,EACPoB,SAAUlB,KAEZ,SAACoB,EAAA,EAAD,CACEJ,QAAQ,YACRC,KAAK,SACLI,UAAW1B,GAAaG,EAAawB,OAAS,EAC9CzC,UAAWC,EACXyC,SAAS,SAACC,EAAA,EAAD,IALX,6BAWDvB,IACC,SAACwB,EAAA,EAAD,CACEC,GAAI,CACFhD,MAAO,QACPiD,OAAQ,YACRC,UAAW,EACXC,gBAAiB,QAEnBC,QAAS,EAPX,UASE,SAACC,EAAA,EAAD,CACEC,SAAS,QACThB,QAAQ,WACRiB,QAASC,YAAW,WAClBzC,GAAS0C,EAAAA,EAAAA,QACR,KACHC,QACE,SAAChB,EAAA,EAAD,CACEiB,MAAM,UACNC,KAAK,QACLC,QAAS,WACP9C,GAAS0C,EAAAA,EAAAA,OAJb,mBAPJ,SAkBGlC","sources":["webpack://chat-test-task/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","hooks/useFormFields.js","webpack://chat-test-task/./src/views/RegisterView/RegisterView.module.css?6d4e","views/RegisterView/RegisterView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__xN0ZL\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({\n  title,\n  isHidden,\n  width,\n  flexShrink,\n  children,\n}) {\n  return (\n    <section\n      className={s.section}\n      style={{ width: `${width}`, flexShrink: `${flexShrink}` }}\n    >\n      <h1 className={isHidden ? 'sectionTitleIsHidden' : 'sectionTitle'}>\n        {title}\n      </h1>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  isHidden: PropTypes.bool.isRequired,\n  width: PropTypes.string.isRequired,\n  flexShrink: PropTypes.number.isRequired,\n};\n","import { useState } from 'react';\n\nexport default function useFormFields(initialVal) {\n  const [state, setState] = useState(initialVal);\n\n  const handleChange = ({ target: { value } }) => {\n    setState(value);\n  };\n\n  return { state, setState, handleChange };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterView_form__UGur7\",\"input\":\"RegisterView_input__zZjJD\",\"registerBtn\":\"RegisterView_registerBtn__1EGvc\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from '@mui/material';\nimport Alert from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport SendIcon from '@mui/icons-material/Send';\nimport useFormFields from 'hooks/useFormFields';\nimport { register } from 'redux/auth/authOperations';\nimport { resetError } from 'redux/auth/authActions';\nimport { getError } from 'redux/auth/authSelectors';\nimport Section from 'components/Section';\nimport Container from 'components/Container';\nimport s from './RegisterView.module.css';\n\nexport default function RegisterView() {\n  const dispatch = useDispatch();\n  const {\n    state: userEmail,\n    setState: setUserEmail,\n    handleChange: handleUserEmailChange,\n  } = useFormFields('');\n  const {\n    state: userPassword,\n    setState: setUserPassword,\n    handleChange: handleUserPasswordChange,\n  } = useFormFields('');\n  const error = useSelector(getError);\n\n  const handleRegisterSubmit = evt => {\n    evt.preventDefault();\n    dispatch(register({ email: userEmail, password: userPassword }));\n    formReset();\n  };\n\n  const formReset = () => {\n    setUserEmail('');\n    setUserPassword('');\n  };\n\n  return (\n    <Section\n      title=\"Please register\"\n      isHidden={false}\n      width=\"100%\"\n      flexShrink={0}\n    >\n      <Container style={{ display: 'block' }}>\n        <form className={s.form} onSubmit={handleRegisterSubmit}>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Email:\"\n            variant=\"outlined\"\n            type=\"email\"\n            className={s.input}\n            value={userEmail}\n            onChange={handleUserEmailChange}\n          />\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Password:\"\n            variant=\"outlined\"\n            type=\"password\"\n            required\n            className={s.input}\n            value={userPassword}\n            onChange={handleUserPasswordChange}\n          />\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            disabled={!userEmail || userPassword.length < 7 ? true : false}\n            className={s.registerBtn}\n            endIcon={<SendIcon />}\n          >\n            Register now\n          </Button>\n        </form>\n\n        {error && (\n          <Stack\n            sx={{\n              width: '500px',\n              margin: '10px auto',\n              boxShadow: 8,\n              backgroundColor: '#fff',\n            }}\n            spacing={2}\n          >\n            <Alert\n              severity=\"error\"\n              variant=\"outlined\"\n              onClose={setTimeout(() => {\n                dispatch(resetError());\n              }, 2000)}\n              action={\n                <Button\n                  color=\"inherit\"\n                  size=\"small\"\n                  onClick={() => {\n                    dispatch(resetError());\n                  }}\n                >\n                  Close\n                </Button>\n              }\n            >\n              {error}\n            </Alert>\n          </Stack>\n        )}\n      </Container>\n    </Section>\n  );\n}\n"],"names":["Section","title","isHidden","width","flexShrink","children","className","s","style","useFormFields","initialVal","useState","state","setState","handleChange","value","target","RegisterView","dispatch","useDispatch","userEmail","setUserEmail","handleUserEmailChange","userPassword","setUserPassword","handleUserPasswordChange","error","useSelector","getError","formReset","Container","display","onSubmit","evt","preventDefault","register","email","password","TextField","id","label","variant","type","onChange","required","Button","disabled","length","endIcon","Send","Stack","sx","margin","boxShadow","backgroundColor","spacing","Alert","severity","onClose","setTimeout","resetError","action","color","size","onClick"],"sourceRoot":""}